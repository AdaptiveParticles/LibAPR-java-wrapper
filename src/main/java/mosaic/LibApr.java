// Targeted by JavaCPP version 1.4.1: DO NOT EDIT THIS FILE

package mosaic;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class LibApr extends mosaic.presets.AprLibConfig {
    static { Loader.load(); }

// Parsed from APR.h

// #ifndef __APR_H__
// #define __APR_H__

// #include "data_structures/APR/APR.hpp"
// #include "numerics/APRTreeNumerics.hpp"
// #include <cstdint>
// #include <iostream>

@NoOffset public static class JavaAPR extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public JavaAPR(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public JavaAPR(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public JavaAPR position(long position) {
        return (JavaAPR)super.position(position);
    }

    public JavaAPR() { super((Pointer)null); allocate(); }
    private native void allocate();
    public native void read(@StdString BytePointer aAprFileName);
    public native void read(@StdString String aAprFileName);

    // Default values for min/max will reconstruct whole image
    public native void reconstruct(int x_min/*=0*/, int x_max/*=-2*/, int y_min/*=0*/, int y_max/*=-2*/, int z_min/*=0*/, int z_max/*=-2*/);
    public native void reconstruct();

    public native void reconstructToBuffer(int x, int y, int z, int width, int height, int depth, int level, @Cast("uint16_t*") ShortPointer buffer);
    public native void reconstructToBuffer(int x, int y, int z, int width, int height, int depth, int level, @Cast("uint16_t*") ShortBuffer buffer);
    public native void reconstructToBuffer(int x, int y, int z, int width, int height, int depth, int level, @Cast("uint16_t*") short[] buffer);

    public native JavaAPR get16bitUnsignedAPRInternal(int width, int height, int depth, int bpp, @Cast("uint16_t*") ShortPointer buffer);
    public native JavaAPR get16bitUnsignedAPRInternal(int width, int height, int depth, int bpp, @Cast("uint16_t*") ShortBuffer buffer);
    public native JavaAPR get16bitUnsignedAPRInternal(int width, int height, int depth, int bpp, @Cast("uint16_t*") short[] buffer);

    public native ShortPointer data();

    public native int height();
    public native int width();
    public native int depth();

    public native void saveAPR(@StdString BytePointer aDirectory, @StdString BytePointer aFileName);
    public native void saveAPR(@StdString String aDirectory, @StdString String aFileName);
}

// #endif //__APR_H__


// Parsed from algorithm/APRParameters.hpp

//
// Created by cheesema on 08.01.18.
//

// #ifndef PARTPLAY_APR_PARAMETERS_HPP
// #define PARTPLAY_APR_PARAMETERS_HPP

// #include <string>
// #include <iostream>

public static class APRParameters extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public APRParameters() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public APRParameters(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public APRParameters(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public APRParameters position(long position) {
        return (APRParameters)super.position(position);
    }


    // pixel spacing
    public native float dx(); public native APRParameters dx(float dx);
    public native float dy(); public native APRParameters dy(float dy);
    public native float dz(); public native APRParameters dz(float dz);

    // window size set for Local Intensity Scale
    public native float psfx(); public native APRParameters psfx(float psfx);
    public native float psfy(); public native APRParameters psfy(float psfy);
    public native float psfz(); public native APRParameters psfz(float psfz);

    public native float Ip_th(); public native APRParameters Ip_th(float Ip_th);
    public native float SNR_min(); public native APRParameters SNR_min(float SNR_min);
    public native float lambda(); public native APRParameters lambda(float lambda);
    public native float min_signal(); public native APRParameters min_signal(float min_signal);
    public native float rel_error(); public native APRParameters rel_error(float rel_error);

    public native float sigma_th(); public native APRParameters sigma_th(float sigma_th);
    public native float sigma_th_max(); public native APRParameters sigma_th_max(float sigma_th_max);

    public native float noise_sd_estimate(); public native APRParameters noise_sd_estimate(float noise_sd_estimate);
    public native float background_intensity_estimate(); public native APRParameters background_intensity_estimate(float background_intensity_estimate);

    public native @Cast("bool") boolean auto_parameters(); public native APRParameters auto_parameters(boolean auto_parameters);

    public native @Cast("bool") boolean normalized_input(); public native APRParameters normalized_input(boolean normalized_input);

    public native @Cast("bool") boolean neighborhood_optimization(); public native APRParameters neighborhood_optimization(boolean neighborhood_optimization);

    public native @Cast("bool") boolean output_steps(); public native APRParameters output_steps(boolean output_steps);

    public native @StdString BytePointer name(); public native APRParameters name(BytePointer name);
    public native @StdString BytePointer output_dir(); public native APRParameters output_dir(BytePointer output_dir);
    public native @StdString BytePointer input_image_name(); public native APRParameters input_image_name(BytePointer input_image_name);
    public native @StdString BytePointer input_dir(); public native APRParameters input_dir(BytePointer input_dir);
    public native @StdString BytePointer mask_file(); public native APRParameters mask_file(BytePointer mask_file);

    
}


// #endif //PARTPLAY_APR_PARAMETERS_HPP


}
